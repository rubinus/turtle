/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "git.cloud2go.cn/reedition/turtle/api/pkg/apis/turtle/v1"
	"git.cloud2go.cn/reedition/turtle/api/pkg/client/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type TurtleV1Interface interface {
	RESTClient() rest.Interface
	ClustersGetter
	CronJobsGetter
	DaemonSetsGetter
	DataCentersGetter
	DeploymentsGetter
	EventsGetter
	HPAsGetter
	IngressesGetter
	JobsGetter
	NamespacesGetter
	NodesGetter
	PVsGetter
	PVCsGetter
	PodsGetter
	ReplicaSetsGetter
	ServicesGetter
	StatefulSetsGetter
	ZonesGetter
}

// TurtleV1Client is used to interact with features provided by the turtle group.
type TurtleV1Client struct {
	restClient rest.Interface
}

func (c *TurtleV1Client) Clusters() ClusterInterface {
	return newClusters(c)
}

func (c *TurtleV1Client) CronJobs() CronJobInterface {
	return newCronJobs(c)
}

func (c *TurtleV1Client) DaemonSets() DaemonSetInterface {
	return newDaemonSets(c)
}

func (c *TurtleV1Client) DataCenters() DataCenterInterface {
	return newDataCenters(c)
}

func (c *TurtleV1Client) Deployments() DeploymentInterface {
	return newDeployments(c)
}

func (c *TurtleV1Client) Events() EventInterface {
	return newEvents(c)
}

func (c *TurtleV1Client) HPAs() HPAInterface {
	return newHPAs(c)
}

func (c *TurtleV1Client) Ingresses() IngressInterface {
	return newIngresses(c)
}

func (c *TurtleV1Client) Jobs() JobInterface {
	return newJobs(c)
}

func (c *TurtleV1Client) Namespaces() NamespaceInterface {
	return newNamespaces(c)
}

func (c *TurtleV1Client) Nodes() NodeInterface {
	return newNodes(c)
}

func (c *TurtleV1Client) PVs() PVInterface {
	return newPVs(c)
}

func (c *TurtleV1Client) PVCs() PVCInterface {
	return newPVCs(c)
}

func (c *TurtleV1Client) Pods() PodInterface {
	return newPods(c)
}

func (c *TurtleV1Client) ReplicaSets() ReplicaSetInterface {
	return newReplicaSets(c)
}

func (c *TurtleV1Client) Services() ServiceInterface {
	return newServices(c)
}

func (c *TurtleV1Client) StatefulSets() StatefulSetInterface {
	return newStatefulSets(c)
}

func (c *TurtleV1Client) Zones() ZoneInterface {
	return newZones(c)
}

// NewForConfig creates a new TurtleV1Client for the given config.
func NewForConfig(c *rest.Config) (*TurtleV1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &TurtleV1Client{client}, nil
}

// NewForConfigOrDie creates a new TurtleV1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *TurtleV1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new TurtleV1Client for the given RESTClient.
func New(c rest.Interface) *TurtleV1Client {
	return &TurtleV1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *TurtleV1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
